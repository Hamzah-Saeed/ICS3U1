/* Hamzah Saeed
 * Ms. Karasinska
 * Assignment 2: Level 4+
 * 2022-11-08
 * Program Description: This program is meant to be a guessing game with a variety of different levels (3). In a game like format it prompts the user to decide on important decisions such as
 *                      what level to play. Level 2 is the easiest level with the user having to guess a number within a predetermined range of 1-100, this is timed and the amount of guesses
 *                      taken is taken into account. Level 3 allows the user to decide the range they want to use to guess a number within, they can score higher by guessing the number faster
 *                      and using fewer guesses, in this level they can also lose if they breach the number of guesses the program provides them. Level 4 is the most complex, the user provides
 *                      a range to the computer and the computer attempts to guess the number by halving the range the number is found it until it finds it, there is no point system for the
 *                      computer. The user can also decide how many games they want to see step by step being done by the computer and the amount of games they want to see the computer play.
 *
 * Data Dictionary:
 *  choice = Holds the users input for which level they want to play
 *  unknown = Holds the unknown number the user is attempting to guess
 *  min = Holds either the user input or the default value for the minimum value of the range the user is attempting to guess the number within
 *  max = Holds either the user input or the default value for the maximum value of the range the user is attempting to guess the number within
 *  threshold = Holds the user input for how many computer games they want to see done step by step
 *  guess = Holds the user input or the computers input for what they guessed the number was
 *  guesses = Holds the amount of guesses the user or computer have to guess the number
 *  compGuesses = Holds the amount of guesses the computer has done - used to end a while loop when it exceeds the amount of guesses allowed
 *  userGuesses = Holds the amount of guesses the user has done - used to end a while loop when it exceeds the amount of guesses allowed
 *  startQuestion = Holds the user input for deciding whether they want to continue playing the game or whether they want to see how to play or how points are allocated
 *  rangeStorage = Stores the range to be temporarily used in a do loop
 *  range = Stores the range to be used when the computer is guessing
 *  startTime = Stores the time of when the timer began in nano seconds
 *  endTime = Stores the time of when the timer ended in nano seconds
 *  timePassed = Store the total time it took the user to guess the number or lose the game
 *  points = Stores the users point
 *  quitChoice = Stores the letter that decides whether the game will go again or not
 *  runCount = Stores the number of how many times the game has run
 *
 */


public class LastLevel {
    public static void main(String[] args) {

        int choice;
        int unknown;
        int min = 1;
        int max = 100;
        int threshold = 5;
        int guess;
        int guesses = 0;
        int compGuesses = 0;
        int userGuesses = 0;
        char startQuestion;
        int points;
        char quitChoice;
        int runCount=0;

        do {    //Will run the entire program at least once before prompting whether they want to play again or not
            if(runCount==0) {   //The welcome statement will only run on the first run of the loop
                System.out.println("Welcome to Hamzah's guessing game! \nHere you will guess a random number generated by your computer! \nYou will be awarded points on how you perform. \nBest of luck!\n");
            }

            do { //Ensures that the prompt and user input are shown at least once, if the input is not what the game desires it will prompt the user again
                System.out.println("If this is your first time playing, type 'A' to view a 'how to play' page \nIf you would like to see how the point system works type 'B'\nIf you would like to continue please type 'C'");
                startQuestion = In.getChar();
            } while (startQuestion != 'A' && startQuestion != 'B' && startQuestion != 'C');   //The 3 options that were provided in the print statement

            while (startQuestion == 'A' || startQuestion == 'B') {    //Ensures that if the user does not choose one of the given prompts that it will ask until a valid one is provided
                if (startQuestion == 'A') {   //Prints out the how to play text and an important do loop
                    System.out.println("*****HOW TO PLAY******\nThere are 3 different levels in this game, level 1, 2 and 3. In level 2 you guess a number in a given range of 1-100 where you attempt to guess the number in the lowest number of attempts, with higher points for fewer time and fewer guesses.\nIn level 3 you guess a number in a range provided by YOU, and attempt to guess the number in the lowest number of attempts, with higher points for fewer time and fewer guesses.\nIn level 4 a computer attempts to guess the number in the fewest possible attemps, you can choose how many times the game with the computer runs, the range, and how many games you want to see step by step.");
                    do { //Asks if they would like to continue or see how points are scored
                        System.out.println("If you would like to see how the point system works please type 'B' or if you want to continue to the game, please type 'C'.");
                        startQuestion = In.getChar();
                    } while (startQuestion != 'B' && startQuestion != 'C');   // 'B' takes the user to the point system - 'C' takes user to the game
                }
                if (startQuestion == 'B') {   //Prints out the point system text and an important do loop
                    System.out.println("*****POINT SYSTEM*****\nThe point system in Hamzah's Guessing Game revolves around 3 aspects, the amount of guesses, the time spent and whether you win or lose! You have a total of 100 points at the start and every guess and every second lowly ticks off more and more points.\nThe amount of guesses you have for level 2 are out of a total of 50 points, the more points the less weight of each point.\nEvery 2 seconds that pass one point is deducted in both level 1 and 2, in level 1 this is 100% of the points in level 2 it is the other 50 points.\nIf you lose you get 0 points.");
                    do { //Asks if they would like to continue or see how to play
                        System.out.println("If you would like to see how to play the game, please type 'A' or if you want to continue to the game, please type 'C'.");
                        startQuestion = In.getChar();
                    } while (startQuestion != 'A' && startQuestion != 'C'); // 'A' takes the user to the how to play area - 'C' takes user to the game
                }
            }

            do {    //Ensures the user is prompted at least once and given a chance to answer which level they want to play
                System.out.println("Would you like to try level '2', '3', '4' or '5'?");
                choice = In.getInt();
            } while ((choice != 2 && choice != 3 && choice != 4 ));    //When an invalid level is provided (chooses an option not provided) the loop will continue


            if (choice == 2) {  //Initializes the unknown value when the range is 1-100
                unknown = (int) (100 * Math.random()) + 1;  //Uses Math.random to create a random number
            } else {    //Runs in the 2 other cases
                do {    //Ensures the user is prompted at least once and given a chance to answer which level they want to play
                    System.out.println("What would you like the minimum to be?");
                    min = In.getInt();
                    System.out.println("What would you like the maximum to be?");
                    max = In.getInt();
                    if (max < min)  //Lets the user now what went wrong if they put the maximum value lower than the minimum
                        System.out.println("The maximum value cannot be greater than the minimum value.\n");
                } while (max < min);    //continues when the maximum is less than the minimum
                unknown = min + (int) ((max - min + 1) * Math.random());  //Uses Math.random to create a random number - Multiplies by the max-min+1 to get the accurate range (max and min are included so without +1 it isn't accurate)
            }

            int rangeStorage = max - min + 1; //Initializes the range so the amount of guesses can be calculated, range once again has a +1 because the max and min are included in the range
            do {    //This do loop limits the amount of guesses the user has, such that they only have enough to calculate perfectly if they use a halving technique
                rangeStorage /= 2;  //dividing the range by 2 embodies the halving technique, so every time it can divide the user gets 1 more guess until it cannot be halved anymore
                guesses += 1;
            } while (rangeStorage != 0);

            if (choice == 4) {  //the computer game is very different from the other games, which is why it is in its own if statement - separate values, print statements and more
                System.out.println("How many games do you want the computer to play?");
                int compGames = In.getInt();    //Stores the amount of computer games that the user wants to play
                System.out.println("How many games do you want to see step by step?");
                threshold = In.getInt();    //Initializes the threshold value


                for (int i = 1; i <= compGames; i++) {  //The for loop will run until it is equal to compGames, which at that point will have already done all the compGames

                    unknown = min + (int) ((max - min + 1) * Math.random());    //Initializes the unknown value within the loop so every time the for loop runs again the value is different

                    int tempMax = max;  //Stores the value of max into tempMax, so it may be changed
                    int tempMin = min;  //Stores the value of min into tempMin, so it may be changed

                    compGuesses = 0;    //Initializes the value of compGuesses so when we enter the upcoming while loop the value resets
                    guess = 0;  //Resets the value of guess before entering the while loop
                    System.out.println("Game " + i + "");   //Tells the user what game the computer is on


                    while (guess != unknown && compGuesses < guesses) { //While the value hasn't been guessed and guesses remain the computer can continue guessing

                        int range = (tempMax - tempMin) + 1;    //Initializes the value of range
                        range /= 2; //Divides the value of range by 2, this value will continue to be halved
                        guess = (tempMax - range);  //Stores the computers guess which is created by subtracting the halved value from the max, it cannot be the range as the range starts from 0 which the guess at times not have an option of


                        if (guess < unknown) {
                            tempMin = guess;    //Limits the options remaining by half even if value is wrong, if the value cannot be under the guessed value, minimum can be changed to the guess

                        } else if (guess > unknown) {
                            tempMax = guess;    //Limits the options remaining by half even if value is wrong, if the value cannot be over the guessed value, maximum can be changed to the guess
                        }

                        if (i <= threshold) {   //if the i value which increases after every new game if under threshold the following print statements will print


                            if (guess < unknown) {    //if the guess is lower than the actual unknown value and there are still guesses remaining, print
                                System.out.println("The computer guesses: " + guess + ". The guess is too low. Guessing again.");

                            } else if (guess > unknown) { //if the guess is higher than the actual unknown value and there are still guesses remaining, print
                                System.out.println("The computer guesses: " + guess + ". The guess is too high. Guessing again.");

                            } else if (guess == unknown ) { //if the value is equal to the unknown value and there are still guesses remaining print
                                System.out.println("The computer guesses: " + guess + ". That is correct, the number was " + unknown + "!\n");
                            }



                        } else if (guess == unknown) {  //If this case isn't within threshold steps don't have to be shown - if the values are equal print that the computer won
                            System.out.println("The computer won. The number was " + unknown + "\n");
                        }

                        compGuesses++;  //adds one to the amount of computer guesses
                    }
                    if(compGuesses == guesses && guess!=unknown){ //If the computer ran out of guesses and didn't get the right value, the computer lost
                        System.out.println("The computer lost. The number was " + unknown + "\n");
                    }


                }

            } else {    //Runs if the choice was anything other that level 4

                if(choice == 2){
                    System.out.println("Now starting level 2 of guessing game\nRemember that the range is from 1-100!");
                } else {
                    System.out.println("Now starting level 3 of guessing game\nRemember that the range is from"+min+"-"+max+"\n");
                }
                System.out.println("What is your guess?");
                long startTime = System.nanoTime(); //Gets the start time in nano seconds
                guess = In.getInt();    //Stores user input into guess
                while (guess != unknown && userGuesses < guesses) { //While the unknown hasn't been guessed and guesses are still remaining it will run
                    if (guess < min || guess > max) {   //if the guess isn't within the range of number the user decided, it will remind them of the range and prompt again.
                        System.out.println("Invalid input, you have been penalized 1 guess. Guess must be within " + min + "-" + max + ". Try again.");
                    } else {    //In any other scenario it will run
                        if (guess < unknown) {  //prompt if the value is too low
                            System.out.println("Too Low. Try Again.");
                        } else if (guess > unknown) {   //prompt if the value is too high
                            System.out.println("Too High. Try Again.");
                        }

                    }
                    guess = In.getInt();    //Stores user input into guess
                    userGuesses++;  //adds one to the amount of user guesses
                }


                long endTime = System.nanoTime();   //records the time in nano seconds the guessing ended
                long timePassed = endTime - startTime;  //Finds the difference in time to know how long the guessing took
                timePassed /= 1000000000;   //convert from nano seconds to seconds


                if (choice == 2) {  //provides a score based on game 2
                    points = (int) (100 - timePassed / 2);  //100 is the base score, and it divides the time passed by 2 as every 2 seconds 1 point is lost, it does not deduct half a mark
                } else {    //provides a score based on game 3
                    System.out.println(userGuesses + " " + guesses);
                    double userGuesses2 = userGuesses;  // Double math cannot be done in the point portion without double variables
                    double guesses2 = guesses;  // Double math cannot be done in the point portion without double variables
                    points = (int) ((100 - (timePassed / 2)) - ((userGuesses2/guesses2) * 50)); //100 is the base score. It then finds a decimal value of a percentage of how many times the user did guess to amount of guesses provided to then multiply by the 50% allocated to that portion to  get that mark. For seconds it divides the time passed by 2 as every 2 seconds 1 point is lost, it does not deduct half a mark
                }


                if (userGuesses == guesses && guess != unknown){    //These lines print out the final lines of the code, telling whether they lost or won. if the user runs out of guesses without being able to get the unknown value, it will print the lose statement
                    System.out.println("You lose. The number was " + unknown + ". It took you "+timePassed+ " seconds to lose. You scored 0/100 points, try harder.\n");
                } else {    //In any other scenario (a win situation) it will tell the user they won with the stats of the game
                    System.out.println("Congratulations, you win! The number was " + unknown + ". You finished in " + timePassed + " seconds. You scored " + points + "/100\n");
                }


            }
            do {    //Asks whether they want to play again or not, if Q or C is not entered it will keep asking, if Q is entered it will leave and if C is entered it will repeat
                System.out.println("Do you want to play again? Type 'C' if you do!\nDo you want to quit? Type 'Q' if you do.");
                quitChoice = In.getChar();
            } while (quitChoice!='C' && quitChoice!='Q');

            runCount++; //adds one to runCount

        } while (quitChoice != 'Q');


    }
}